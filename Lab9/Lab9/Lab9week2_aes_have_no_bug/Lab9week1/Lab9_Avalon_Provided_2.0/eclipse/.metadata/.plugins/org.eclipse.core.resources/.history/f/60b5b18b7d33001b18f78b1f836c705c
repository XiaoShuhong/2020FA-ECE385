/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000040;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}




void RotWord(unsigned char *Word){      //do a cyclically rotate from a0,a1,a2,a3; to a1,a2,a3,a0
	unsigned char temp=Word[0];
	Word[0]=Word[1];
	Word[1]=Word[2];
	Word[2]=Word[3];
	Word[3]=temp;
}

unsigned char SubBytes(unsigned char CurrentByte){
	return aes_sbox[CurrentByte];
}

//1 word=32bit=4bytes
void KeyExpansion(unsigned char * Key,unsigned char * KeySchedule)
{
	unsigned char temp[4];  //temp store the preword
	int i=0;
	int j,k;
	while (i<16){
		KeySchedule[i]=Key[i];
		i+=1;
	}
	i=4;
	while(i<44){
		for(j=0;j<4;j++){
			temp[j]=KeySchedule[4*i+j-4];
		}
		if(i%4==0){
			RotWord(temp);   //rotate temp
			for (k=0;k<4;k++){
				temp[k]=SubBytes(temp[k]);  //change every one of four byte into the corresponding byte using SubBytes
			
			}
			temp[0]=temp[0]^Rcon[i/4]>>24;
			temp[1]=temp[1]^Rcon[i/4]>>16;
			temp[2]=temp[2]^Rcon[i/4]>>8;
			temp[3]=temp[3]^Rcon[i/4];

		}
		for (j=0;j<4;j++){
			KeySchedule[4*i+j]=KeySchedule[4*(i-4)+j]^temp[j];
			
		}
		i+=1;
		


	}


}



void AddRoundKey(unsigned char* State,unsigned char* RoundKey, unsigned int times){
	int i;
	for(i=0;i<16;i++){
		State[i]=State[i]^RoundKey[i+times*16];
	}
}
void ShiftRows(unsigned char*State){
	unsigned char temp,temp2;
	temp=State[1];
	State[1]=State[5];
	State[5]=State[9];
    State[9]=State[13];
	State[13]=temp;
	temp=State[2];
	State[2]=State[10];
	State[10]=temp;
	temp=State[6];
	State[6]=State[14];
	State[14]=temp;
	temp=State[3];
	State[3]=State[15];
	temp2=State[7];
	State[7]=temp;
	temp=State[11];
	State[11]=temp2;
	State[15]=temp;
}

void MixColumns(unsigned char *State){
	int i;
	unsigned char gf[16];  //used to store the initial value of State, which we can find the corresponding in gf_mul
	for (i=0;i<16;i++){
		gf[i]=State[i];
	}
	State[0]=gf_mul[gf[0]][0]^gf_mul[gf[1]][1]^gf[2]^gf[3];
	State[1]=gf[0]^gf_mul[gf[1]][0]^gf_mul[gf[2]][1]^gf[3];
	State[2]=gf[0]^gf[1]^gf_mul[gf[2]][0]^gf_mul[gf[3]][1];
	State[3]=gf_mul[gf[0]][1]^gf[1]^gf[2]^gf_mul[gf[3]][0];
	//first column
	State[4]=gf_mul[gf[4]][0]^gf_mul[gf[5]][1]^gf[6]^gf[7];
	State[5]=gf[4]^gf_mul[gf[5]][0]^gf_mul[gf[6]][1]^gf[7];
	State[6]=gf[4]^gf[5]^gf_mul[gf[6]][0]^gf_mul[gf[7]][1];
	State[7]=gf_mul[gf[4]][1]^gf[5]^gf[6]^gf_mul[gf[7]][0];
	//second column
	State[8]=gf_mul[gf[8]][0]^gf_mul[gf[9]][1]^gf[10]^gf[11];
	State[9]=gf[8]^gf_mul[gf[9]][0]^gf_mul[gf[10]][1]^gf[11];
	State[10]=gf[8]^gf[9]^gf_mul[gf[10]][0]^gf_mul[gf[11]][1];
	State[11]=gf_mul[gf[8]][1]^gf[9]^gf[10]^gf_mul[gf[11]][0];
	//third column
	State[12]=gf_mul[gf[12]][0]^gf_mul[gf[13]][1]^gf[14]^gf[15];
	State[13]=gf[12]^gf_mul[gf[13]][0]^gf_mul[gf[14]][1]^gf[15];
	State[14]=gf[12]^gf[13]^gf_mul[gf[14]][0]^gf_mul[gf[15]][1];
	State[15]=gf_mul[gf[12]][1]^gf[13]^gf[14]^gf_mul[gf[15]][0];
	//forth column

}
/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key,unsigned char* KeySchedule)
{
	// Implement this function
	//first convert 32x8 bit char input to hex
	unsigned char hexmsg[16];
	unsigned char hexkey[16];
	int i,j;
	for(i=0;i<16;i++){
		hexmsg[i]=charsToHex(msg_ascii[2 * i], msg_ascii[2 * i + 1]);
		hexkey[i]=charsToHex(key_ascii[2 * i], key_ascii[2 * i + 1]);
	}
	//then bulid keyschedule with keyexpansion
	KeyExpansion(hexkey,KeySchedule);
	//addroundkey
	AddRoundKey(hexmsg,KeySchedule,0);
	//begin loop 9 times
	for(i=1;i<10;i++){
		//do subbytes
		for(j=0;j<16;j++){
			hexmsg[j]=SubBytes(hexmsg[j]);
		}
		//do shiftrows
		ShiftRows(hexmsg);
		//do mixcolumn
		MixColumns(hexmsg);
		//do addroundkey
		AddRoundKey(hexmsg,KeySchedule,i);

	}
	//do the 11th operation

	//do subbytes
	for(j=0;j<16;j++){
			hexmsg[j]=SubBytes(hexmsg[j]);
		}
	//do shiftrows
		ShiftRows(hexmsg);
	//do addroundkey
		AddRoundKey(hexmsg,KeySchedule,10);

	//finally assign output
	for(i=0;i<4;i++){
		msg_enc[i]=(hexmsg[i * 4] << 24) + (hexmsg[i * 4 + 1] << 16) + (hexmsg[i * 4 + 2] << 8) + (hexmsg[i * 4 + 3]);
		key[i]=(hexkey[i * 4] << 24) + (hexkey[i * 4 + 1] << 16) + (hexkey[i * 4 + 2] << 8) + (hexkey[i * 4 + 3]);
	}


}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key,unsigned char* KeySchedule)
{
	// Implement this function
	unsigned int temp[4];
	temp[3]=(KeySchedule[172] << 24) + (KeySchedule[173] << 16) + (KeySchedule[174] << 8) + (KeySchedule[175]);
	temp[2]=(KeySchedule[168] << 24) + (KeySchedule[169] << 16) + (KeySchedule[170] << 8) + (KeySchedule[171]);
	temp[1]=(KeySchedule[164] << 24) + (KeySchedule[165] << 16) + (KeySchedule[166] << 8) + (KeySchedule[167]);
	temp[0]=(KeySchedule[160] << 24) + (KeySchedule[161] << 16) + (KeySchedule[162] << 8) + (KeySchedule[163]);


	AES_PTR[0]=key[0];
	AES_PTR[1]=key[1];
	AES_PTR[2]=key[2];
	AES_PTR[3]=key[3];

	AES_PTR[4]=msg_enc[0];
	AES_PTR[5]=msg_enc[1];
	AES_PTR[6]=msg_enc[2];
	AES_PTR[7]=msg_enc[3];
	AES_PTR[14]=1;
	while(AES_PTR[15]==0){
		continue;
	}
	msg_dec[0]=AES_PTR[8];
	msg_dec[1]=AES_PTR[9];
	msg_dec[2]=AES_PTR[10];
	msg_dec[3]=AES_PTR[11];

}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];
	unsigned char KeySchedule[176];
	AES_PTR[10]=0xDEADBEEF;
	if (AES_PTR[10]==0xDEADBEEF)
	{
		printf("succesful");
	}
	else
	{
		printf("fail");
	}
	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key,KeySchedule);

			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key,KeySchedule);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key,KeySchedule);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key,KeySchedule);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}

