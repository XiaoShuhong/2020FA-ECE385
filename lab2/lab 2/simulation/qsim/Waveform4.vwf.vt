// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2020 16:27:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg F_signal;
reg L_signal;
reg PRE;
reg result;
reg S_signal;
// wires                                               
wire d_select1;
wire d_select2;
wire fetch;
wire ldsbr;
wire select;
wire store;

// assign statements (if any)                          
Block8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.d_select1(d_select1),
	.d_select2(d_select2),
	.F_signal(F_signal),
	.fetch(fetch),
	.L_signal(L_signal),
	.ldsbr(ldsbr),
	.PRE(PRE),
	.result(result),
	.S_signal(S_signal),
	.select(select),
	.store(store)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(33)
	begin
		CLK = 1'b0;
		CLK = #15000 1'b1;
		# 15000;
	end
	CLK = 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #80000 1'b1;
end 

// PRE
initial
begin
	PRE = 1'b1;
end 

// F_signal
initial
begin
	F_signal = 1'b0;
end 

// L_signal
initial
begin
	L_signal = 1'b0;
end 

// S_signal
initial
begin
	S_signal = 1'b0;
	S_signal = #80000 1'b1;
end 

// result
initial
begin
	result = 1'b0;
end 
endmodule

