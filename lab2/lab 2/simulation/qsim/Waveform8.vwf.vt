// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/21/2020 00:06:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg B1;
reg B2;
reg B3;
reg B4;
reg CARRY0;
reg CARRY1;
reg CLK;
reg CLR;
reg DIN0;
reg DIN1;
reg FETCH;
reg GND;
reg LDSBR;
reg PRE_high;
reg S0_high;
reg S1_low;
reg SAR0;
reg SAR1;
reg STORE;
// wires                                               
wire QA0;
wire QA1;
wire QB0;
wire QB1;
wire QC0;
wire QC1;
wire QD0;
wire QD1;
wire SBR0;
wire SBR1;
wire select;

// assign statements (if any)                          
Block9 i1 (
// port map - connection between master ports and signals/registers   
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.CARRY0(CARRY0),
	.CARRY1(CARRY1),
	.CLK(CLK),
	.CLR(CLR),
	.DIN0(DIN0),
	.DIN1(DIN1),
	.FETCH(FETCH),
	.\GND (GND),
	.LDSBR(LDSBR),
	.PRE_high(PRE_high),
	.QA0(QA0),
	.QA1(QA1),
	.QB0(QB0),
	.QB1(QB1),
	.QC0(QC0),
	.QC1(QC1),
	.QD0(QD0),
	.QD1(QD1),
	.S0_high(S0_high),
	.S1_low(S1_low),
	.SAR0(SAR0),
	.SAR1(SAR1),
	.SBR0(SBR0),
	.SBR1(SBR1),
	.select(select),
	.STORE(STORE)
);
initial 
begin 
#1000000 $finish;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B4
initial
begin
	B4 = 1'b0;
end 

// CARRY0
initial
begin
	CARRY0 = 1'b0;
end 

// CARRY1
initial
begin
	CARRY1 = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #40000 1'b1;
end 

// GND
initial
begin
	GND = 1'b0;
end 

// S0_high
initial
begin
	S0_high = 1'b1;
end 

// S1_low
initial
begin
	S1_low = 1'b0;
end 

// PRE_high
initial
begin
	PRE_high = 1'b1;
end 

// SAR1
initial
begin
	SAR1 = 1'b0;
end 

// SAR0
initial
begin
	SAR0 = 1'b0;
end 

// DIN1
initial
begin
	DIN1 = 1'b0;
end 

// DIN0
initial
begin
	DIN0 = 1'b0;
end 

// FETCH
initial
begin
	FETCH = 1'b0;
end 

// STORE
initial
begin
	STORE = 1'b0;
end 

// LDSBR
initial
begin
	LDSBR = 1'b0;
end 
endmodule

