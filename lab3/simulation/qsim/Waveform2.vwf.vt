// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2020 11:53:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLRN;
reg D0;
reg D1;
reg D2;
reg D3;
reg EXECUTE;
reg LOAD_A;
reg LOAD_B;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire B0;
wire B1;
wire B2;
wire B3;

// assign statements (if any)                          
Block2 i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.CLK(CLK),
	.CLRN(CLRN),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.EXECUTE(EXECUTE),
	.LOAD_A(LOAD_A),
	.LOAD_B(LOAD_B)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

// CLRN
initial
begin
	CLRN = 1'b1;
end 

// EXECUTE
initial
begin
	EXECUTE = 1'b0;
end 

// LOAD_A
initial
begin
	LOAD_A = 1'b1;
end 

// LOAD_B
initial
begin
	LOAD_B = 1'b0;
end 

// D3
initial
begin
	D3 = 1'b1;
end 

// D2
initial
begin
	D2 = 1'b0;
end 

// D1
initial
begin
	D1 = 1'b1;
end 

// D0
initial
begin
	D0 = 1'b0;
end 
endmodule

