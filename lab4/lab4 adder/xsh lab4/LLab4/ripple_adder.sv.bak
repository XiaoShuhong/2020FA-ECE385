module f         (input a,b,cin, 
                  output logic s,cout);
						assign s = a^b^cin;
						assign cout = (a&b) | (a&cin) | (b&cin);
endmodule
         

module four_bit_adder(input [3:0] a,
                      input [3:0] b,
							 input cin,
							 output logic [3:0] sum,
							 output logic cout);
							 
							 logic c1,c2,c3;
							 
							 f F0(.a(a[0]), .b(b[0]), .cin(cin), .s(sum[0]), .cout(c1));
							 f F1(.a(a[1]), .b(b[1]), .cin(c1), .s(sum[1]), .cout(c2));
							 f F2(.a(a[2]), .b(b[2]), .cin(c2), .s(sum[2]), .cout(c3));
							 f F3(.a(a[3]), .b(b[3]), .cin(c3), .s(sum[3]), .cout(cout));
endmodule
							 

module ripple_adder
(
    input   logic[15:0]     A,
    input   logic[15:0]     B,
    output  logic[15:0]     Sum,
    output  logic           CO);
	  
	 logic c1,c2,c3;
	 
	 four_bit_adder Fa0( .a(A[3:0]), .b(B[3:0]), .cin(0), .sum(Sum[3:0]), .cout(c1));
	 four_bit_adder Fa1( .a(A[7:4]), .b(B[7:4]), .cin(c1), .sum(Sum[7:4]), .cout(c2));
	 four_bit_adder Fa2( .a(A[11:8]), .b(B[11:8]), .cin(c2), .sum(Sum[11:8]), .cout(c3));
	 four_bit_adder Fa3( .a(A[15:12]), .b(B[15:12]), .cin(c3), .sum(Sum[15:12]), .cout(C0));
	 


     
endmodule
